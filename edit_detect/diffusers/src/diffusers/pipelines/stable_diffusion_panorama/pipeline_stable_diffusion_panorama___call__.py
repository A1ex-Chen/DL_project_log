@torch.no_grad()
@replace_example_docstring(EXAMPLE_DOC_STRING)
def __call__(self, prompt: Union[str, List[str]]=None, height: Optional[int
    ]=512, width: Optional[int]=2048, num_inference_steps: int=50,
    timesteps: List[int]=None, guidance_scale: float=7.5, view_batch_size:
    int=1, negative_prompt: Optional[Union[str, List[str]]]=None,
    num_images_per_prompt: Optional[int]=1, eta: float=0.0, generator:
    Optional[Union[torch.Generator, List[torch.Generator]]]=None, latents:
    Optional[torch.Tensor]=None, prompt_embeds: Optional[torch.Tensor]=None,
    negative_prompt_embeds: Optional[torch.Tensor]=None, ip_adapter_image:
    Optional[PipelineImageInput]=None, ip_adapter_image_embeds: Optional[
    List[torch.Tensor]]=None, output_type: Optional[str]='pil', return_dict:
    bool=True, cross_attention_kwargs: Optional[Dict[str, Any]]=None,
    guidance_rescale: float=0.0, circular_padding: bool=False, clip_skip:
    Optional[int]=None, callback_on_step_end: Optional[Callable[[int, int,
    Dict], None]]=None, callback_on_step_end_tensor_inputs: List[str]=[
    'latents'], **kwargs: Any):
    """
        The call function to the pipeline for generation.

        Args:
            prompt (`str` or `List[str]`, *optional*):
                The prompt or prompts to guide image generation. If not defined, you need to pass `prompt_embeds`.
            height (`int`, *optional*, defaults to 512):
                The height in pixels of the generated image.
            width (`int`, *optional*, defaults to 2048):
                The width in pixels of the generated image. The width is kept high because the pipeline is supposed
                generate panorama-like images.
            num_inference_steps (`int`, *optional*, defaults to 50):
                The number of denoising steps. More denoising steps usually lead to a higher quality image at the
                expense of slower inference.
            timesteps (`List[int]`, *optional*):
                The timesteps at which to generate the images. If not specified, then the default timestep spacing
                strategy of the scheduler is used.
            guidance_scale (`float`, *optional*, defaults to 7.5):
                A higher guidance scale value encourages the model to generate images closely linked to the text
                `prompt` at the expense of lower image quality. Guidance scale is enabled when `guidance_scale > 1`.
            view_batch_size (`int`, *optional*, defaults to 1):
                The batch size to denoise split views. For some GPUs with high performance, higher view batch size can
                speedup the generation and increase the VRAM usage.
            negative_prompt (`str` or `List[str]`, *optional*):
                The prompt or prompts to guide what to not include in image generation. If not defined, you need to
                pass `negative_prompt_embeds` instead. Ignored when not using guidance (`guidance_scale < 1`).
            num_images_per_prompt (`int`, *optional*, defaults to 1):
                The number of images to generate per prompt.
            eta (`float`, *optional*, defaults to 0.0):
                Corresponds to parameter eta (Î·) from the [DDIM](https://arxiv.org/abs/2010.02502) paper. Only applies
                to the [`~schedulers.DDIMScheduler`], and is ignored in other schedulers.
            generator (`torch.Generator` or `List[torch.Generator]`, *optional*):
                A [`torch.Generator`](https://pytorch.org/docs/stable/generated/torch.Generator.html) to make
                generation deterministic.
            latents (`torch.Tensor`, *optional*):
                Pre-generated noisy latents sampled from a Gaussian distribution, to be used as inputs for image
                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
                tensor is generated by sampling using the supplied random `generator`.
            prompt_embeds (`torch.Tensor`, *optional*):
                Pre-generated text embeddings. Can be used to easily tweak text inputs (prompt weighting). If not
                provided, text embeddings are generated from the `prompt` input argument.
            negative_prompt_embeds (`torch.Tensor`, *optional*):
                Pre-generated negative text embeddings. Can be used to easily tweak text inputs (prompt weighting). If
                not provided, `negative_prompt_embeds` are generated from the `negative_prompt` input argument.
            ip_adapter_image: (`PipelineImageInput`, *optional*):
                Optional image input to work with IP Adapters.
            ip_adapter_image_embeds (`List[torch.Tensor]`, *optional*):
                Pre-generated image embeddings for IP-Adapter. It should be a list of length same as number of
                IP-adapters. Each element should be a tensor of shape `(batch_size, num_images, emb_dim)`. It should
                contain the negative image embedding if `do_classifier_free_guidance` is set to `True`. If not
                provided, embeddings are computed from the `ip_adapter_image` input argument.
            output_type (`str`, *optional*, defaults to `"pil"`):
                The output format of the generated image. Choose between `PIL.Image` or `np.array`.
            return_dict (`bool`, *optional*, defaults to `True`):
                Whether or not to return a [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] instead of a
                plain tuple.
            cross_attention_kwargs (`dict`, *optional*):
                A kwargs dictionary that if specified is passed along to the `AttentionProcessor` as defined under
                `self.processor` in
                [diffusers.models.attention_processor](https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/attention_processor.py).
            guidance_rescale (`float`, *optional*, defaults to 0.0):
                A rescaling factor for the guidance embeddings. A value of 0.0 means no rescaling is applied.
            circular_padding (`bool`, *optional*, defaults to `False`):
                If set to `True`, circular padding is applied to ensure there are no stitching artifacts. Circular
                padding allows the model to seamlessly generate a transition from the rightmost part of the image to
                the leftmost part, maintaining consistency in a 360-degree sense.
            clip_skip (`int`, *optional*):
                Number of layers to be skipped from CLIP while computing the prompt embeddings. A value of 1 means that
                the output of the pre-final layer will be used for computing the prompt embeddings.
            callback_on_step_end (`Callable`, *optional*):
                A function that calls at the end of each denoising steps during the inference. The function is called
                with the following arguments: `callback_on_step_end(self: DiffusionPipeline, step: int, timestep: int,
                callback_kwargs: Dict)`. `callback_kwargs` will include a list of all tensors as specified by
                `callback_on_step_end_tensor_inputs`.
            callback_on_step_end_tensor_inputs (`List[str]`, *optional*):
                The list of tensor inputs for the `callback_on_step_end` function. The tensors specified in the list
                will be passed as `callback_kwargs` argument. You will only be able to include variables listed in the
                `._callback_tensor_inputs` attribute of your pipeline class.
        Examples:

        Returns:
            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] or `tuple`:
                If `return_dict` is `True`, [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] is returned,
                otherwise a `tuple` is returned where the first element is a list with the generated images and the
                second element is a list of `bool`s indicating whether the corresponding generated image contains
                "not-safe-for-work" (nsfw) content.
        """
    callback = kwargs.pop('callback', None)
    callback_steps = kwargs.pop('callback_steps', None)
    if callback is not None:
        deprecate('callback', '1.0.0',
            'Passing `callback` as an input argument to `__call__` is deprecated, consider using `callback_on_step_end`'
            )
    if callback_steps is not None:
        deprecate('callback_steps', '1.0.0',
            'Passing `callback_steps` as an input argument to `__call__` is deprecated, consider using `callback_on_step_end`'
            )
    height = height or self.unet.config.sample_size * self.vae_scale_factor
    width = width or self.unet.config.sample_size * self.vae_scale_factor
    self.check_inputs(prompt, height, width, callback_steps,
        negative_prompt, prompt_embeds, negative_prompt_embeds,
        ip_adapter_image, ip_adapter_image_embeds,
        callback_on_step_end_tensor_inputs)
    self._guidance_scale = guidance_scale
    self._guidance_rescale = guidance_rescale
    self._clip_skip = clip_skip
    self._cross_attention_kwargs = cross_attention_kwargs
    self._interrupt = False
    if prompt is not None and isinstance(prompt, str):
        batch_size = 1
    elif prompt is not None and isinstance(prompt, list):
        batch_size = len(prompt)
    else:
        batch_size = prompt_embeds.shape[0]
    device = self._execution_device
    do_classifier_free_guidance = guidance_scale > 1.0
    if ip_adapter_image is not None or ip_adapter_image_embeds is not None:
        image_embeds = self.prepare_ip_adapter_image_embeds(ip_adapter_image,
            ip_adapter_image_embeds, device, batch_size *
            num_images_per_prompt, self.do_classifier_free_guidance)
    text_encoder_lora_scale = cross_attention_kwargs.get('scale', None
        ) if cross_attention_kwargs is not None else None
    prompt_embeds, negative_prompt_embeds = self.encode_prompt(prompt,
        device, num_images_per_prompt, do_classifier_free_guidance,
        negative_prompt, prompt_embeds=prompt_embeds,
        negative_prompt_embeds=negative_prompt_embeds, lora_scale=
        text_encoder_lora_scale, clip_skip=clip_skip)
    if do_classifier_free_guidance:
        prompt_embeds = torch.cat([negative_prompt_embeds, prompt_embeds])
    timesteps, num_inference_steps = retrieve_timesteps(self.scheduler,
        num_inference_steps, device, timesteps)
    num_channels_latents = self.unet.config.in_channels
    latents = self.prepare_latents(batch_size * num_images_per_prompt,
        num_channels_latents, height, width, prompt_embeds.dtype, device,
        generator, latents)
    views = self.get_views(height, width, circular_padding=circular_padding)
    views_batch = [views[i:i + view_batch_size] for i in range(0, len(views
        ), view_batch_size)]
    views_scheduler_status = [copy.deepcopy(self.scheduler.__dict__)] * len(
        views_batch)
    count = torch.zeros_like(latents)
    value = torch.zeros_like(latents)
    extra_step_kwargs = self.prepare_extra_step_kwargs(generator, eta)
    added_cond_kwargs = ({'image_embeds': image_embeds} if ip_adapter_image
         is not None or ip_adapter_image_embeds is not None else None)
    timestep_cond = None
    if self.unet.config.time_cond_proj_dim is not None:
        guidance_scale_tensor = torch.tensor(self.guidance_scale - 1).repeat(
            batch_size * num_images_per_prompt)
        timestep_cond = self.get_guidance_scale_embedding(guidance_scale_tensor
            , embedding_dim=self.unet.config.time_cond_proj_dim).to(device=
            device, dtype=latents.dtype)
    num_warmup_steps = len(timesteps
        ) - num_inference_steps * self.scheduler.order
    self._num_timesteps = len(timesteps)
    with self.progress_bar(total=num_inference_steps) as progress_bar:
        for i, t in enumerate(timesteps):
            if self.interrupt:
                continue
            count.zero_()
            value.zero_()
            for j, batch_view in enumerate(views_batch):
                vb_size = len(batch_view)
                if circular_padding:
                    latents_for_view = []
                    for h_start, h_end, w_start, w_end in batch_view:
                        if w_end > latents.shape[3]:
                            latent_view = torch.cat((latents[:, :, h_start:
                                h_end, w_start:], latents[:, :, h_start:
                                h_end, :w_end - latents.shape[3]]), axis=-1)
                        else:
                            latent_view = latents[:, :, h_start:h_end,
                                w_start:w_end]
                        latents_for_view.append(latent_view)
                    latents_for_view = torch.cat(latents_for_view)
                else:
                    latents_for_view = torch.cat([latents[:, :, h_start:
                        h_end, w_start:w_end] for h_start, h_end, w_start,
                        w_end in batch_view])
                self.scheduler.__dict__.update(views_scheduler_status[j])
                latent_model_input = latents_for_view.repeat_interleave(2,
                    dim=0) if do_classifier_free_guidance else latents_for_view
                latent_model_input = self.scheduler.scale_model_input(
                    latent_model_input, t)
                prompt_embeds_input = torch.cat([prompt_embeds] * vb_size)
                noise_pred = self.unet(latent_model_input, t,
                    encoder_hidden_states=prompt_embeds_input,
                    timestep_cond=timestep_cond, cross_attention_kwargs=
                    cross_attention_kwargs, added_cond_kwargs=added_cond_kwargs
                    ).sample
                if do_classifier_free_guidance:
                    noise_pred_uncond, noise_pred_text = noise_pred[::2
                        ], noise_pred[1::2]
                    noise_pred = noise_pred_uncond + guidance_scale * (
                        noise_pred_text - noise_pred_uncond)
                if (self.do_classifier_free_guidance and self.
                    guidance_rescale > 0.0):
                    noise_pred = rescale_noise_cfg(noise_pred,
                        noise_pred_text, guidance_rescale=self.guidance_rescale
                        )
                latents_denoised_batch = self.scheduler.step(noise_pred, t,
                    latents_for_view, **extra_step_kwargs).prev_sample
                views_scheduler_status[j] = copy.deepcopy(self.scheduler.
                    __dict__)
                for latents_view_denoised, (h_start, h_end, w_start, w_end
                    ) in zip(latents_denoised_batch.chunk(vb_size), batch_view
                    ):
                    if circular_padding and w_end > latents.shape[3]:
                        value[:, :, h_start:h_end, w_start:
                            ] += latents_view_denoised[:, :, h_start:h_end,
                            :latents.shape[3] - w_start]
                        value[:, :, h_start:h_end, :w_end - latents.shape[3]
                            ] += latents_view_denoised[:, :, h_start:h_end,
                            latents.shape[3] - w_start:]
                        count[:, :, h_start:h_end, w_start:] += 1
                        count[:, :, h_start:h_end, :w_end - latents.shape[3]
                            ] += 1
                    else:
                        value[:, :, h_start:h_end, w_start:w_end
                            ] += latents_view_denoised
                        count[:, :, h_start:h_end, w_start:w_end] += 1
            latents = torch.where(count > 0, value / count, value)
            if callback_on_step_end is not None:
                callback_kwargs = {}
                for k in callback_on_step_end_tensor_inputs:
                    callback_kwargs[k] = locals()[k]
                callback_outputs = callback_on_step_end(self, i, t,
                    callback_kwargs)
                latents = callback_outputs.pop('latents', latents)
                prompt_embeds = callback_outputs.pop('prompt_embeds',
                    prompt_embeds)
                negative_prompt_embeds = callback_outputs.pop(
                    'negative_prompt_embeds', negative_prompt_embeds)
            if i == len(timesteps) - 1 or i + 1 > num_warmup_steps and (i + 1
                ) % self.scheduler.order == 0:
                progress_bar.update()
                if callback is not None and i % callback_steps == 0:
                    step_idx = i // getattr(self.scheduler, 'order', 1)
                    callback(step_idx, t, latents)
    if output_type != 'latent':
        if circular_padding:
            image = self.decode_latents_with_padding(latents)
        else:
            image = self.vae.decode(latents / self.vae.config.
                scaling_factor, return_dict=False)[0]
        image, has_nsfw_concept = self.run_safety_checker(image, device,
            prompt_embeds.dtype)
    else:
        image = latents
        has_nsfw_concept = None
    if has_nsfw_concept is None:
        do_denormalize = [True] * image.shape[0]
    else:
        do_denormalize = [(not has_nsfw) for has_nsfw in has_nsfw_concept]
    image = self.image_processor.postprocess(image, output_type=output_type,
        do_denormalize=do_denormalize)
    self.maybe_free_model_hooks()
    if not return_dict:
        return image, has_nsfw_concept
    return StableDiffusionPipelineOutput(images=image,
        nsfw_content_detected=has_nsfw_concept)
