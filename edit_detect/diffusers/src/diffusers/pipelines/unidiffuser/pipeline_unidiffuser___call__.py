@torch.no_grad()
def __call__(self, prompt: Optional[Union[str, List[str]]]=None, image:
    Optional[Union[torch.Tensor, PIL.Image.Image]]=None, height: Optional[
    int]=None, width: Optional[int]=None, data_type: Optional[int]=1,
    num_inference_steps: int=50, guidance_scale: float=8.0, negative_prompt:
    Optional[Union[str, List[str]]]=None, num_images_per_prompt: Optional[
    int]=1, num_prompts_per_image: Optional[int]=1, eta: float=0.0,
    generator: Optional[Union[torch.Generator, List[torch.Generator]]]=None,
    latents: Optional[torch.Tensor]=None, prompt_latents: Optional[torch.
    Tensor]=None, vae_latents: Optional[torch.Tensor]=None, clip_latents:
    Optional[torch.Tensor]=None, prompt_embeds: Optional[torch.Tensor]=None,
    negative_prompt_embeds: Optional[torch.Tensor]=None, output_type:
    Optional[str]='pil', return_dict: bool=True, callback: Optional[
    Callable[[int, int, torch.Tensor], None]]=None, callback_steps: int=1):
    """
        The call function to the pipeline for generation.

        Args:
            prompt (`str` or `List[str]`, *optional*):
                The prompt or prompts to guide image generation. If not defined, you need to pass `prompt_embeds`.
                Required for text-conditioned image generation (`text2img`) mode.
            image (`torch.Tensor` or `PIL.Image.Image`, *optional*):
                `Image` or tensor representing an image batch. Required for image-conditioned text generation
                (`img2text`) mode.
            height (`int`, *optional*, defaults to `self.unet.config.sample_size * self.vae_scale_factor`):
                The height in pixels of the generated image.
            width (`int`, *optional*, defaults to `self.unet.config.sample_size * self.vae_scale_factor`):
                The width in pixels of the generated image.
            data_type (`int`, *optional*, defaults to 1):
                The data type (either 0 or 1). Only used if you are loading a checkpoint which supports a data type
                embedding; this is added for compatibility with the
                [UniDiffuser-v1](https://huggingface.co/thu-ml/unidiffuser-v1) checkpoint.
            num_inference_steps (`int`, *optional*, defaults to 50):
                The number of denoising steps. More denoising steps usually lead to a higher quality image at the
                expense of slower inference.
            guidance_scale (`float`, *optional*, defaults to 8.0):
                A higher guidance scale value encourages the model to generate images closely linked to the text
                `prompt` at the expense of lower image quality. Guidance scale is enabled when `guidance_scale > 1`.
            negative_prompt (`str` or `List[str]`, *optional*):
                The prompt or prompts to guide what to not include in image generation. If not defined, you need to
                pass `negative_prompt_embeds` instead. Ignored when not using guidance (`guidance_scale < 1`). Used in
                text-conditioned image generation (`text2img`) mode.
            num_images_per_prompt (`int`, *optional*, defaults to 1):
                The number of images to generate per prompt. Used in `text2img` (text-conditioned image generation) and
                `img` mode. If the mode is joint and both `num_images_per_prompt` and `num_prompts_per_image` are
                supplied, `min(num_images_per_prompt, num_prompts_per_image)` samples are generated.
            num_prompts_per_image (`int`, *optional*, defaults to 1):
                The number of prompts to generate per image. Used in `img2text` (image-conditioned text generation) and
                `text` mode. If the mode is joint and both `num_images_per_prompt` and `num_prompts_per_image` are
                supplied, `min(num_images_per_prompt, num_prompts_per_image)` samples are generated.
            eta (`float`, *optional*, defaults to 0.0):
                Corresponds to parameter eta (Î·) from the [DDIM](https://arxiv.org/abs/2010.02502) paper. Only applies
                to the [`~schedulers.DDIMScheduler`], and is ignored in other schedulers.
            generator (`torch.Generator` or `List[torch.Generator]`, *optional*):
                A [`torch.Generator`](https://pytorch.org/docs/stable/generated/torch.Generator.html) to make
                generation deterministic.
            latents (`torch.Tensor`, *optional*):
                Pre-generated noisy latents sampled from a Gaussian distribution, to be used as inputs for joint
                image-text generation. Can be used to tweak the same generation with different prompts. If not
                provided, a latents tensor is generated by sampling using the supplied random `generator`. This assumes
                a full set of VAE, CLIP, and text latents, if supplied, overrides the value of `prompt_latents`,
                `vae_latents`, and `clip_latents`.
            prompt_latents (`torch.Tensor`, *optional*):
                Pre-generated noisy latents sampled from a Gaussian distribution, to be used as inputs for text
                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
                tensor is generated by sampling using the supplied random `generator`.
            vae_latents (`torch.Tensor`, *optional*):
                Pre-generated noisy latents sampled from a Gaussian distribution, to be used as inputs for image
                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
                tensor is generated by sampling using the supplied random `generator`.
            clip_latents (`torch.Tensor`, *optional*):
                Pre-generated noisy latents sampled from a Gaussian distribution, to be used as inputs for image
                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
                tensor is generated by sampling using the supplied random `generator`.
            prompt_embeds (`torch.Tensor`, *optional*):
                Pre-generated text embeddings. Can be used to easily tweak text inputs (prompt weighting). If not
                provided, text embeddings are generated from the `prompt` input argument. Used in text-conditioned
                image generation (`text2img`) mode.
            negative_prompt_embeds (`torch.Tensor`, *optional*):
                Pre-generated negative text embeddings. Can be used to easily tweak text inputs (prompt weighting). If
                not provided, `negative_prompt_embeds` are be generated from the `negative_prompt` input argument. Used
                in text-conditioned image generation (`text2img`) mode.
            output_type (`str`, *optional*, defaults to `"pil"`):
                The output format of the generated image. Choose between `PIL.Image` or `np.array`.
            return_dict (`bool`, *optional*, defaults to `True`):
                Whether or not to return a [`~pipelines.ImageTextPipelineOutput`] instead of a plain tuple.
            callback (`Callable`, *optional*):
                A function that calls every `callback_steps` steps during inference. The function is called with the
                following arguments: `callback(step: int, timestep: int, latents: torch.Tensor)`.
            callback_steps (`int`, *optional*, defaults to 1):
                The frequency at which the `callback` function is called. If not specified, the callback is called at
                every step.

        Returns:
            [`~pipelines.unidiffuser.ImageTextPipelineOutput`] or `tuple`:
                If `return_dict` is `True`, [`~pipelines.unidiffuser.ImageTextPipelineOutput`] is returned, otherwise a
                `tuple` is returned where the first element is a list with the generated images and the second element
                is a list of generated texts.
        """
    height = height or self.unet_resolution * self.vae_scale_factor
    width = width or self.unet_resolution * self.vae_scale_factor
    mode = self._infer_mode(prompt, prompt_embeds, image, latents,
        prompt_latents, vae_latents, clip_latents)
    self.check_inputs(mode, prompt, image, height, width, callback_steps,
        negative_prompt, prompt_embeds, negative_prompt_embeds, latents,
        prompt_latents, vae_latents, clip_latents)
    batch_size, multiplier = self._infer_batch_size(mode, prompt,
        prompt_embeds, image, num_images_per_prompt, num_prompts_per_image,
        latents, prompt_latents, vae_latents, clip_latents)
    device = self._execution_device
    reduce_text_emb_dim = (self.text_intermediate_dim < self.
        text_encoder_hidden_size or self.mode != 'text2img')
    do_classifier_free_guidance = guidance_scale > 1.0
    if latents is not None:
        vae_latents, clip_latents, prompt_latents = self._split_joint(latents,
            height, width)
    if mode in ['text2img']:
        assert prompt is not None or prompt_embeds is not None
        prompt_embeds, negative_prompt_embeds = self.encode_prompt(prompt=
            prompt, device=device, num_images_per_prompt=multiplier,
            do_classifier_free_guidance=do_classifier_free_guidance,
            negative_prompt=negative_prompt, prompt_embeds=prompt_embeds,
            negative_prompt_embeds=negative_prompt_embeds)
    else:
        prompt_embeds = self.prepare_text_latents(batch_size=batch_size,
            num_images_per_prompt=multiplier, seq_len=self.
            text_encoder_seq_len, hidden_size=self.text_encoder_hidden_size,
            dtype=self.text_encoder.dtype, device=device, generator=
            generator, latents=prompt_latents)
    if reduce_text_emb_dim:
        prompt_embeds = self.text_decoder.encode(prompt_embeds)
    if mode in ['img2text']:
        assert image is not None, '`img2text` requires a conditioning image'
        image_vae = self.image_processor.preprocess(image)
        height, width = image_vae.shape[-2:]
        image_vae_latents = self.encode_image_vae_latents(image=image_vae,
            batch_size=batch_size, num_prompts_per_image=multiplier, dtype=
            prompt_embeds.dtype, device=device, do_classifier_free_guidance
            =False, generator=generator)
        image_clip_latents = self.encode_image_clip_latents(image=image,
            batch_size=batch_size, num_prompts_per_image=multiplier, dtype=
            prompt_embeds.dtype, device=device, generator=generator)
        image_clip_latents = image_clip_latents.unsqueeze(1)
    else:
        image_vae_latents = self.prepare_image_vae_latents(batch_size=
            batch_size, num_prompts_per_image=multiplier,
            num_channels_latents=self.num_channels_latents, height=height,
            width=width, dtype=prompt_embeds.dtype, device=device,
            generator=generator, latents=vae_latents)
        image_clip_latents = self.prepare_image_clip_latents(batch_size=
            batch_size, num_prompts_per_image=multiplier, clip_img_dim=self
            .image_encoder_projection_dim, dtype=prompt_embeds.dtype,
            device=device, generator=generator, latents=clip_latents)
    self.scheduler.set_timesteps(num_inference_steps, device=device)
    timesteps = self.scheduler.timesteps
    max_timestep = self.scheduler.config.num_train_timesteps
    if mode == 'joint':
        latents = self._combine_joint(image_vae_latents, image_clip_latents,
            prompt_embeds)
    elif mode in ['text2img', 'img']:
        latents = self._combine(image_vae_latents, image_clip_latents)
    elif mode in ['img2text', 'text']:
        latents = prompt_embeds
    extra_step_kwargs = self.prepare_extra_step_kwargs(generator, eta)
    logger.debug(f'Scheduler extra step kwargs: {extra_step_kwargs}')
    num_warmup_steps = len(timesteps
        ) - num_inference_steps * self.scheduler.order
    with self.progress_bar(total=num_inference_steps) as progress_bar:
        for i, t in enumerate(timesteps):
            noise_pred = self._get_noise_pred(mode, latents, t,
                prompt_embeds, image_vae_latents, image_clip_latents,
                max_timestep, data_type, guidance_scale, generator, device,
                height, width)
            latents = self.scheduler.step(noise_pred, t, latents, **
                extra_step_kwargs).prev_sample
            if i == len(timesteps) - 1 or i + 1 > num_warmup_steps and (i + 1
                ) % self.scheduler.order == 0:
                progress_bar.update()
                if callback is not None and i % callback_steps == 0:
                    step_idx = i // getattr(self.scheduler, 'order', 1)
                    callback(step_idx, t, latents)
    image = None
    text = None
    if mode == 'joint':
        image_vae_latents, image_clip_latents, text_latents = (self.
            _split_joint(latents, height, width))
        if not output_type == 'latent':
            image = self.vae.decode(image_vae_latents / self.vae.config.
                scaling_factor, return_dict=False)[0]
        else:
            image = image_vae_latents
        text = self.decode_text_latents(text_latents, device)
    elif mode in ['text2img', 'img']:
        image_vae_latents, image_clip_latents = self._split(latents, height,
            width)
        if not output_type == 'latent':
            image = self.vae.decode(image_vae_latents / self.vae.config.
                scaling_factor, return_dict=False)[0]
        else:
            image = image_vae_latents
    elif mode in ['img2text', 'text']:
        text_latents = latents
        text = self.decode_text_latents(text_latents, device)
    self.maybe_free_model_hooks()
    if image is not None:
        do_denormalize = [True] * image.shape[0]
        image = self.image_processor.postprocess(image, output_type=
            output_type, do_denormalize=do_denormalize)
    if hasattr(self, 'final_offload_hook'
        ) and self.final_offload_hook is not None:
        self.final_offload_hook.offload()
    if not return_dict:
        return image, text
    return ImageTextPipelineOutput(images=image, text=text)
