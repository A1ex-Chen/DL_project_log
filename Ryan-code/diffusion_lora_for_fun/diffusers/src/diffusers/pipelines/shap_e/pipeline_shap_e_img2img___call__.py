@torch.no_grad()
@replace_example_docstring(EXAMPLE_DOC_STRING)
def __call__(self, image: Union[PIL.Image.Image, List[PIL.Image.Image]],
    num_images_per_prompt: int=1, num_inference_steps: int=25, generator:
    Optional[Union[torch.Generator, List[torch.Generator]]]=None, latents:
    Optional[torch.Tensor]=None, guidance_scale: float=4.0, frame_size: int
    =64, output_type: Optional[str]='pil', return_dict: bool=True):
    """
        The call function to the pipeline for generation.

        Args:
            image (`torch.Tensor`, `PIL.Image.Image`, `np.ndarray`, `List[torch.Tensor]`, `List[PIL.Image.Image]`, or `List[np.ndarray]`):
                `Image` or tensor representing an image batch to be used as the starting point. Can also accept image
                latents as image, but if passing latents directly it is not encoded again.
            num_images_per_prompt (`int`, *optional*, defaults to 1):
                The number of images to generate per prompt.
            num_inference_steps (`int`, *optional*, defaults to 25):
                The number of denoising steps. More denoising steps usually lead to a higher quality image at the
                expense of slower inference.
            generator (`torch.Generator` or `List[torch.Generator]`, *optional*):
                A [`torch.Generator`](https://pytorch.org/docs/stable/generated/torch.Generator.html) to make
                generation deterministic.
            latents (`torch.Tensor`, *optional*):
                Pre-generated noisy latents sampled from a Gaussian distribution, to be used as inputs for image
                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
                tensor is generated by sampling using the supplied random `generator`.
            guidance_scale (`float`, *optional*, defaults to 4.0):
                A higher guidance scale value encourages the model to generate images closely linked to the text
                `prompt` at the expense of lower image quality. Guidance scale is enabled when `guidance_scale > 1`.
            frame_size (`int`, *optional*, default to 64):
                The width and height of each image frame of the generated 3D output.
            output_type (`str`, *optional*, defaults to `"pil"`):
                The output format of the generated image. Choose between `"pil"` (`PIL.Image.Image`), `"np"`
                (`np.array`), `"latent"` (`torch.Tensor`), or mesh ([`MeshDecoderOutput`]).
            return_dict (`bool`, *optional*, defaults to `True`):
                Whether or not to return a [`~pipelines.shap_e.pipeline_shap_e.ShapEPipelineOutput`] instead of a plain
                tuple.

        Examples:

        Returns:
            [`~pipelines.shap_e.pipeline_shap_e.ShapEPipelineOutput`] or `tuple`:
                If `return_dict` is `True`, [`~pipelines.shap_e.pipeline_shap_e.ShapEPipelineOutput`] is returned,
                otherwise a `tuple` is returned where the first element is a list with the generated images.
        """
    if isinstance(image, PIL.Image.Image):
        batch_size = 1
    elif isinstance(image, torch.Tensor):
        batch_size = image.shape[0]
    elif isinstance(image, list) and isinstance(image[0], (torch.Tensor,
        PIL.Image.Image)):
        batch_size = len(image)
    else:
        raise ValueError(
            f'`image` has to be of type `PIL.Image.Image`, `torch.Tensor`, `List[PIL.Image.Image]` or `List[torch.Tensor]` but is {type(image)}'
            )
    device = self._execution_device
    batch_size = batch_size * num_images_per_prompt
    do_classifier_free_guidance = guidance_scale > 1.0
    image_embeds = self._encode_image(image, device, num_images_per_prompt,
        do_classifier_free_guidance)
    self.scheduler.set_timesteps(num_inference_steps, device=device)
    timesteps = self.scheduler.timesteps
    num_embeddings = self.prior.config.num_embeddings
    embedding_dim = self.prior.config.embedding_dim
    if latents is None:
        latents = self.prepare_latents((batch_size, num_embeddings *
            embedding_dim), image_embeds.dtype, device, generator, latents,
            self.scheduler)
    latents = latents.reshape(latents.shape[0], num_embeddings, embedding_dim)
    for i, t in enumerate(self.progress_bar(timesteps)):
        latent_model_input = torch.cat([latents] * 2
            ) if do_classifier_free_guidance else latents
        scaled_model_input = self.scheduler.scale_model_input(
            latent_model_input, t)
        noise_pred = self.prior(scaled_model_input, timestep=t,
            proj_embedding=image_embeds).predicted_image_embedding
        noise_pred, _ = noise_pred.split(scaled_model_input.shape[2], dim=2)
        if do_classifier_free_guidance:
            noise_pred_uncond, noise_pred = noise_pred.chunk(2)
            noise_pred = noise_pred_uncond + guidance_scale * (noise_pred -
                noise_pred_uncond)
        latents = self.scheduler.step(noise_pred, timestep=t, sample=latents
            ).prev_sample
    if output_type not in ['np', 'pil', 'latent', 'mesh']:
        raise ValueError(
            f'Only the output types `pil`, `np`, `latent` and `mesh` are supported not output_type={output_type}'
            )
    self.maybe_free_model_hooks()
    if output_type == 'latent':
        return ShapEPipelineOutput(images=latents)
    images = []
    if output_type == 'mesh':
        for i, latent in enumerate(latents):
            mesh = self.shap_e_renderer.decode_to_mesh(latent[None, :], device)
            images.append(mesh)
    else:
        for i, latent in enumerate(latents):
            image = self.shap_e_renderer.decode_to_image(latent[None, :],
                device, size=frame_size)
            images.append(image)
        images = torch.stack(images)
        images = images.cpu().numpy()
        if output_type == 'pil':
            images = [self.numpy_to_pil(image) for image in images]
    if not return_dict:
        return images,
    return ShapEPipelineOutput(images=images)
