@torch.no_grad()
@replace_example_docstring(EXAMPLE_DOC_STRING)
def __call__(self, prompt: Optional[Union[str, List[str]]]=None, height:
    Optional[int]=None, width: Optional[int]=None, num_inference_steps: int
    =20, guidance_scale: float=10.0, negative_prompt: Optional[Union[str,
    List[str]]]=None, num_images_per_prompt: Optional[int]=1, eta: float=
    0.0, generator: Optional[torch.Generator]=None, latents: Optional[torch
    .FloatTensor]=None, prompt_embeds: Optional[torch.FloatTensor]=None,
    negative_prompt_embeds: Optional[torch.FloatTensor]=None, output_type:
    Optional[str]='pil', return_dict: bool=True, callback: Optional[
    Callable[[int, int, torch.FloatTensor], None]]=None, callback_steps:
    int=1, cross_attention_kwargs: Optional[Dict[str, Any]]=None,
    noise_level: int=0, prior_num_inference_steps: int=25,
    prior_guidance_scale: float=4.0, prior_latents: Optional[torch.
    FloatTensor]=None):
    """
        Function invoked when calling the pipeline for generation.

        Args:
            prompt (`str` or `List[str]`, *optional*):
                The prompt or prompts to guide the image generation. If not defined, one has to pass `prompt_embeds`.
                instead.
            height (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):
                The height in pixels of the generated image.
            width (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):
                The width in pixels of the generated image.
            num_inference_steps (`int`, *optional*, defaults to 20):
                The number of denoising steps. More denoising steps usually lead to a higher quality image at the
                expense of slower inference.
            guidance_scale (`float`, *optional*, defaults to 10.0):
                Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).
                `guidance_scale` is defined as `w` of equation 2. of [Imagen
                Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >
                1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt`,
                usually at the expense of lower image quality.
            negative_prompt (`str` or `List[str]`, *optional*):
                The prompt or prompts not to guide the image generation. If not defined, one has to pass
                `negative_prompt_embeds` instead. Ignored when not using guidance (i.e., ignored if `guidance_scale` is
                less than `1`).
            num_images_per_prompt (`int`, *optional*, defaults to 1):
                The number of images to generate per prompt.
            eta (`float`, *optional*, defaults to 0.0):
                Corresponds to parameter eta (Î·) in the DDIM paper: https://arxiv.org/abs/2010.02502. Only applies to
                [`schedulers.DDIMScheduler`], will be ignored for others.
            generator (`torch.Generator` or `List[torch.Generator]`, *optional*):
                One or a list of [torch generator(s)](https://pytorch.org/docs/stable/generated/torch.Generator.html)
                to make generation deterministic.
            latents (`torch.FloatTensor`, *optional*):
                Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image
                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
                tensor will ge generated by sampling using the supplied random `generator`.
            prompt_embeds (`torch.FloatTensor`, *optional*):
                Pre-generated text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt weighting. If not
                provided, text embeddings will be generated from `prompt` input argument.
            negative_prompt_embeds (`torch.FloatTensor`, *optional*):
                Pre-generated negative text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt
                weighting. If not provided, negative_prompt_embeds will be generated from `negative_prompt` input
                argument.
            output_type (`str`, *optional*, defaults to `"pil"`):
                The output format of the generate image. Choose between
                [PIL](https://pillow.readthedocs.io/en/stable/): `PIL.Image.Image` or `np.array`.
            return_dict (`bool`, *optional*, defaults to `True`):
                Whether or not to return a [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] instead of a
                plain tuple.
            callback (`Callable`, *optional*):
                A function that will be called every `callback_steps` steps during inference. The function will be
                called with the following arguments: `callback(step: int, timestep: int, latents: torch.FloatTensor)`.
            callback_steps (`int`, *optional*, defaults to 1):
                The frequency at which the `callback` function will be called. If not specified, the callback will be
                called at every step.
            cross_attention_kwargs (`dict`, *optional*):
                A kwargs dictionary that if specified is passed along to the `AttentionProcessor` as defined under
                `self.processor` in
                [diffusers.cross_attention](https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/cross_attention.py).
            noise_level (`int`, *optional*, defaults to `0`):
                The amount of noise to add to the image embeddings. A higher `noise_level` increases the variance in
                the final un-noised images. See `StableUnCLIPPipeline.noise_image_embeddings` for details.
            prior_num_inference_steps (`int`, *optional*, defaults to 25):
                The number of denoising steps in the prior denoising process. More denoising steps usually lead to a
                higher quality image at the expense of slower inference.
            prior_guidance_scale (`float`, *optional*, defaults to 4.0):
                Guidance scale for the prior denoising process as defined in [Classifier-Free Diffusion
                Guidance](https://arxiv.org/abs/2207.12598). `prior_guidance_scale` is defined as `w` of equation 2. of
                [Imagen Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting
                `guidance_scale > 1`. Higher guidance scale encourages to generate images that are closely linked to
                the text `prompt`, usually at the expense of lower image quality.
            prior_latents (`torch.FloatTensor`, *optional*):
                Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image
                embedding generation in the prior denoising process. Can be used to tweak the same generation with
                different prompts. If not provided, a latents tensor will ge generated by sampling using the supplied
                random `generator`.

        Examples:

        Returns:
            [`~pipelines.ImagePipelineOutput`] or `tuple`: [`~ pipeline_utils.ImagePipelineOutput`] if `return_dict` is
            True, otherwise a `tuple`. When returning a tuple, the first element is a list with the generated images.
        """
    height = height or self.unet.config.sample_size * self.vae_scale_factor
    width = width or self.unet.config.sample_size * self.vae_scale_factor
    self.check_inputs(prompt=prompt, height=height, width=width,
        callback_steps=callback_steps, noise_level=noise_level,
        negative_prompt=negative_prompt, prompt_embeds=prompt_embeds,
        negative_prompt_embeds=negative_prompt_embeds)
    if prompt is not None and isinstance(prompt, str):
        batch_size = 1
    elif prompt is not None and isinstance(prompt, list):
        batch_size = len(prompt)
    else:
        batch_size = prompt_embeds.shape[0]
    batch_size = batch_size * num_images_per_prompt
    device = self._execution_device
    prior_do_classifier_free_guidance = prior_guidance_scale > 1.0
    (prior_prompt_embeds, prior_text_encoder_hidden_states, prior_text_mask
        ) = (self._encode_prior_prompt(prompt=prompt, device=device,
        num_images_per_prompt=num_images_per_prompt,
        do_classifier_free_guidance=prior_do_classifier_free_guidance))
    self.prior_scheduler.set_timesteps(prior_num_inference_steps, device=device
        )
    prior_timesteps_tensor = self.prior_scheduler.timesteps
    embedding_dim = self.prior.config.embedding_dim
    prior_latents = self.prepare_latents((batch_size, embedding_dim),
        prior_prompt_embeds.dtype, device, generator, prior_latents, self.
        prior_scheduler)
    prior_extra_step_kwargs = self.prepare_prior_extra_step_kwargs(generator,
        eta)
    for i, t in enumerate(self.progress_bar(prior_timesteps_tensor)):
        latent_model_input = torch.cat([prior_latents] * 2
            ) if prior_do_classifier_free_guidance else prior_latents
        latent_model_input = self.prior_scheduler.scale_model_input(
            latent_model_input, t)
        predicted_image_embedding = self.prior(latent_model_input, timestep
            =t, proj_embedding=prior_prompt_embeds, encoder_hidden_states=
            prior_text_encoder_hidden_states, attention_mask=prior_text_mask
            ).predicted_image_embedding
        if prior_do_classifier_free_guidance:
            (predicted_image_embedding_uncond, predicted_image_embedding_text
                ) = predicted_image_embedding.chunk(2)
            predicted_image_embedding = (predicted_image_embedding_uncond +
                prior_guidance_scale * (predicted_image_embedding_text -
                predicted_image_embedding_uncond))
        prior_latents = self.prior_scheduler.step(predicted_image_embedding,
            timestep=t, sample=prior_latents, **prior_extra_step_kwargs
            ).prev_sample
        if callback is not None and i % callback_steps == 0:
            callback(i, t, prior_latents)
    prior_latents = self.prior.post_process_latents(prior_latents)
    image_embeds = prior_latents
    do_classifier_free_guidance = guidance_scale > 1.0
    prompt_embeds = self._encode_prompt(prompt=prompt, device=device,
        num_images_per_prompt=num_images_per_prompt,
        do_classifier_free_guidance=do_classifier_free_guidance,
        negative_prompt=negative_prompt, prompt_embeds=prompt_embeds,
        negative_prompt_embeds=negative_prompt_embeds)
    image_embeds = self.noise_image_embeddings(image_embeds=image_embeds,
        noise_level=noise_level, generator=generator)
    if do_classifier_free_guidance:
        negative_prompt_embeds = torch.zeros_like(image_embeds)
        image_embeds = torch.cat([negative_prompt_embeds, image_embeds])
    self.scheduler.set_timesteps(num_inference_steps, device=device)
    timesteps = self.scheduler.timesteps
    num_channels_latents = self.unet.in_channels
    shape = (batch_size, num_channels_latents, height // self.
        vae_scale_factor, width // self.vae_scale_factor)
    latents = self.prepare_latents(shape=shape, dtype=prompt_embeds.dtype,
        device=device, generator=generator, latents=latents, scheduler=self
        .scheduler)
    extra_step_kwargs = self.prepare_extra_step_kwargs(generator, eta)
    for i, t in enumerate(self.progress_bar(timesteps)):
        latent_model_input = torch.cat([latents] * 2
            ) if do_classifier_free_guidance else latents
        latent_model_input = self.scheduler.scale_model_input(
            latent_model_input, t)
        noise_pred = self.unet(latent_model_input, t, encoder_hidden_states
            =prompt_embeds, class_labels=image_embeds,
            cross_attention_kwargs=cross_attention_kwargs).sample
        if do_classifier_free_guidance:
            noise_pred_uncond, noise_pred_text = noise_pred.chunk(2)
            noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_text
                 - noise_pred_uncond)
        latents = self.scheduler.step(noise_pred, t, latents, **
            extra_step_kwargs).prev_sample
        if callback is not None and i % callback_steps == 0:
            callback(i, t, latents)
    image = self.decode_latents(latents)
    if hasattr(self, 'final_offload_hook'
        ) and self.final_offload_hook is not None:
        self.final_offload_hook.offload()
    if output_type == 'pil':
        image = self.numpy_to_pil(image)
    if not return_dict:
        return image,
    return ImagePipelineOutput(images=image)
