def post_process(params, X_train, X_test, Y_test, score, history, model):
    save_path = params['save_path']
    print('saving to path: ', save_path)
    plt.plot(history.history['mae'])
    plt.plot(history.history['val_mae'])
    plt.title('Model Mean Absolute Error')
    plt.ylabel('mae')
    plt.xlabel('epoch')
    plt.legend(['train', 'test'], loc='upper left')
    plt.savefig(save_path + 'agg_adrp.mae.png', bbox_inches='tight')
    plt.savefig(save_path + 'agg_adrp.mae.pdf', bbox_inches='tight')
    plt.close()
    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])
    plt.title('Model Loss')
    plt.ylabel('loss')
    plt.xlabel('epoch')
    plt.legend(['train', 'test'], loc='upper left')
    plt.savefig(save_path + 'agg_adrp.loss.png', bbox_inches='tight')
    plt.savefig(save_path + 'agg_adrp.loss.pdf', bbox_inches='tight')
    plt.close()
    print('Test val_loss:', score[0])
    print('Test val_mae:', score[1])
    model_json = model.to_json()
    with open(save_path + 'agg_adrp.model.json', 'w') as json_file:
        json_file.write(model_json)
    model_yaml = model.to_yaml()
    with open(save_path + 'agg_adrp.model.yaml', 'w') as yaml_file:
        yaml_file.write(model_yaml)
    model.save_weights(save_path + 'agg_adrp.model.h5')
    print('Saved model to disk')
    json_file = open(save_path + 'agg_adrp.model.json', 'r')
    loaded_model_json = json_file.read()
    json_file.close()
    loaded_model_json = model_from_json(loaded_model_json)
    yaml_file = open(save_path + 'agg_adrp.model.yaml', 'r')
    loaded_model_yaml = yaml_file.read()
    yaml_file.close()
    loaded_model_yaml = model_from_yaml(loaded_model_yaml)
    loaded_model_json.load_weights(save_path + 'agg_adrp.model.h5')
    print('Loaded json model from disk')
    loaded_model_json.compile(optimizer=params['optimizer'], loss=params[
        'loss'], metrics=['mae', r2])
    score_json = loaded_model_json.evaluate(X_test, Y_test, verbose=0)
    print('json Validation loss:', score_json[0])
    print('json Validation mae:', score_json[1])
    print('json %s: %.2f%%' % (loaded_model_json.metrics_names[1], 
        score_json[1] * 100))
    loaded_model_yaml.load_weights(save_path + 'agg_adrp.model.h5')
    print('Loaded yaml model from disk')
    loaded_model_yaml.compile(optimizer=params['optimizer'], loss=params[
        'loss'], metrics=['mae', r2])
    score_yaml = loaded_model_yaml.evaluate(X_test, Y_test, verbose=0)
    print('yaml Validation loss:', score_yaml[0])
    print('yaml Validation mae:', score_yaml[1])
    print('yaml %s: %.2f%%' % (loaded_model_yaml.metrics_names[1], 
        score_yaml[1] * 100))
    predict_yaml_train = loaded_model_yaml.predict(X_train)
    predict_yaml_test = loaded_model_yaml.predict(X_test)
    print('Yaml_train_shape:', predict_yaml_train.shape)
    print('Yaml_test_shape:', predict_yaml_test.shape)
    predict_yaml_train_classes = np.argmax(predict_yaml_train, axis=1)
    predict_yaml_test_classes = np.argmax(predict_yaml_test, axis=1)
    np.savetxt(save_path + 'predict_yaml_train.csv', predict_yaml_train,
        delimiter=',', fmt='%.3f')
    np.savetxt(save_path + 'predict_yaml_test.csv', predict_yaml_test,
        delimiter=',', fmt='%.3f')
    np.savetxt(save_path + 'predict_yaml_train_classes.csv',
        predict_yaml_train_classes, delimiter=',', fmt='%d')
    np.savetxt(save_path + 'predict_yaml_test_classes.csv',
        predict_yaml_test_classes, delimiter=',', fmt='%d')
