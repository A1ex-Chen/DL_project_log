def compute_statistics_quantile(df_data, sigma_divisor=2.56, col_true=4,
    col_pred_start=6):
    """Extracts ground truth, 50th percentile mean prediction,
    low percentile and high percentile mean prediction
    (usually 1st decile and 9th decile respectively),
    error (using 5th decile), standard deviation of
    prediction (using 5th decile) and predicted (learned)
    standard deviation from interdecile range in inference data frame.
    The latter includes all the individual inference realizations.

    Parameters
    ----------
    df_data : pandas data frame
        Data frame generated by current quantile inference
        experiments. Indices are hard coded to agree with
        current version. (The inference file usually
        has the name: <model>.predicted_INFER_QTL.tsv).
    sigma_divisor : float
        Divisor to convert from the intercedile range to the corresponding
        standard deviation for a Gaussian distribution.
        (Default: 2.56, consisten with an interdecile range computed from
        the difference between the 9th and 1st deciles).
    col_true : integer
        Index of the column in the data frame where the true
        value is stored (Default: 4, index in current QTL format).
    col_pred_start : integer
        Index of the column in the data frame where the first predicted
        value is stored. All the predicted values during inference
        are stored and are interspaced with other percentile
        predictions (Default: 6 index, step 3, in current QTL format).

    Return
    ----------
    Ytrue : numpy array
        Array with true (observed) values
    Ypred : numpy array
        Array with predicted values (based on the 50th percentile).
    yerror : numpy array
        Array with errors computed (observed - predicted).
    sigma : numpy array
        Array with standard deviations learned with deep learning
        model. This corresponds to the interdecile range divided
        by the sigma divisor.
    Ypred_std : numpy array
        Array with standard deviations computed from regular
        (homoscedastic) inference.
    pred_name : string
        Name of data colum or quantity predicted (as extracted
        from the data frame using the col_true index).
    Ypred_Lp_mean : numpy array
        Array with predicted values of the lower percentile
        (usually the 1st decile).
    Ypred_Hp_mean : numpy array
        Array with predicted values of the higher percentile
        (usually the 9th decile).
    """
    Ytrue = df_data.iloc[:, col_true].values
    pred_name = df_data.columns[col_true]
    Ypred_5d_mean = np.mean(df_data.iloc[:, col_pred_start::3], axis=1)
    Ypred_mean = Ypred_5d_mean.values
    Ypred_Lp_mean_ = np.mean(df_data.iloc[:, col_pred_start + 1::3], axis=1)
    Ypred_Hp_mean_ = np.mean(df_data.iloc[:, col_pred_start + 2::3], axis=1)
    Ypred_Lp_mean = Ypred_Lp_mean_.values
    Ypred_Hp_mean = Ypred_Hp_mean_.values
    interdecile_range = Ypred_Hp_mean - Ypred_Lp_mean
    sigma = interdecile_range / sigma_divisor
    yerror = Ytrue - Ypred_mean
    Ypred_std_ = np.std(df_data.iloc[:, col_pred_start::3], axis=1)
    Ypred_std = Ypred_std_.values
    MSE = mean_squared_error(Ytrue, Ypred_mean)
    print('MSE: ', MSE)
    MSE_STD = np.std((Ytrue - Ypred_mean) ** 2)
    print('MSE_STD: ', MSE_STD)
    MAE = mean_absolute_error(Ytrue, Ypred_mean)
    print('MAE: ', MAE)
    r2 = r2_score(Ytrue, Ypred_mean)
    print('R2: ', r2)
    pearson_cc, pval = pearsonr(Ytrue, Ypred_mean)
    print('Pearson CC: %f, p-value: %e' % (pearson_cc, pval))
    return (Ytrue, Ypred_mean, yerror, sigma, Ypred_std, pred_name,
        Ypred_Lp_mean, Ypred_Hp_mean)
