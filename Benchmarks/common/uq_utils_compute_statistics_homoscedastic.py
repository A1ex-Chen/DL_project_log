def compute_statistics_homoscedastic(df_data, col_true=4, col_pred_start=6):
    """Extracts ground truth, mean prediction, error and
    standard deviation of prediction from inference
    data frame. The latter includes all the individual
    inference realizations.

    Parameters
    ----------
    df_data : pandas data frame
        Data frame generated by current CANDLE inference
        experiments. Indices are hard coded to agree with
        current CANDLE version. (The inference file usually
        has the name: <model>.predicted_INFER.tsv).
    col_true : integer
        Index of the column in the data frame where the true
        value is stored (Default: 4, index in current HOM format).
    col_pred_start : integer
        Index of the column in the data frame where the first predicted
        value is stored. All the predicted values during inference
        are stored (Default: 6 index, in current HOM format).

    Return
    ----------
    Ytrue : numpy array
        Array with true (observed) values
    Ypred_mean : numpy array
        Array with predicted values (mean of predictions).
    yerror : numpy array
        Array with errors computed (observed - predicted).
    sigma : numpy array
        Array with standard deviations learned with deep learning
        model. For homoscedastic inference this corresponds to the
        std value computed from prediction (and is equal to the
        following returned variable).
    Ypred_std : numpy array
        Array with standard deviations computed from regular
        (homoscedastic) inference.
    pred_name : string
        Name of data colum or quantity predicted (as extracted
        from the data frame using the col_true index).
    """
    Ytrue = df_data.iloc[:, col_true].values
    pred_name = df_data.columns[col_true]
    Ypred_mean_ = np.mean(df_data.iloc[:, col_pred_start:], axis=1)
    Ypred_mean = Ypred_mean_.values
    Ypred_std_ = np.std(df_data.iloc[:, col_pred_start:], axis=1)
    Ypred_std = Ypred_std_.values
    yerror = Ytrue - Ypred_mean
    sigma = Ypred_std
    MSE = mean_squared_error(Ytrue, Ypred_mean)
    print('MSE: ', MSE)
    MSE_STD = np.std((Ytrue - Ypred_mean) ** 2)
    print('MSE_STD: ', MSE_STD)
    MAE = mean_absolute_error(Ytrue, Ypred_mean)
    print('MAE: ', MAE)
    r2 = r2_score(Ytrue, Ypred_mean)
    print('R2: ', r2)
    pearson_cc, pval = pearsonr(Ytrue, Ypred_mean)
    print('Pearson CC: %f, p-value: %e' % (pearson_cc, pval))
    return Ytrue, Ypred_mean, yerror, sigma, Ypred_std, pred_name
