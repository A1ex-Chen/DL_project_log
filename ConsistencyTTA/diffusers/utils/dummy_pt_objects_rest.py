# This file is autogenerated by the command `make fix-copies`, do not edit.
from ..utils import DummyObject, requires_backends


class AutoencoderKL(metaclass=DummyObject):
    _backends = ["torch"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["torch"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])


class ControlNetModel(metaclass=DummyObject):
    _backends = ["torch"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["torch"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])


class ModelMixin(metaclass=DummyObject):
    _backends = ["torch"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["torch"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])


class PriorTransformer(metaclass=DummyObject):
    _backends = ["torch"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["torch"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])


class T5FilmDecoder(metaclass=DummyObject):
    _backends = ["torch"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["torch"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])


class Transformer2DModel(metaclass=DummyObject):
    _backends = ["torch"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["torch"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])


class UNet1DModel(metaclass=DummyObject):
    _backends = ["torch"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["torch"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])


class UNet2DConditionModel(metaclass=DummyObject):
    _backends = ["torch"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["torch"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])


class UNet2DModel(metaclass=DummyObject):
    _backends = ["torch"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["torch"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])


class UNet3DConditionModel(metaclass=DummyObject):
    _backends = ["torch"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["torch"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])


class VQModel(metaclass=DummyObject):
    _backends = ["torch"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["torch"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["torch"])















    @classmethod

    @classmethod


class ControlNetModel(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class ModelMixin(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class PriorTransformer(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class T5FilmDecoder(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class Transformer2DModel(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class UNet1DModel(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class UNet2DConditionModel(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class UNet2DModel(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class UNet3DConditionModel(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class VQModel(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


def get_constant_schedule(*args, **kwargs):
    requires_backends(get_constant_schedule, ["torch"])


def get_constant_schedule_with_warmup(*args, **kwargs):
    requires_backends(get_constant_schedule_with_warmup, ["torch"])


def get_cosine_schedule_with_warmup(*args, **kwargs):
    requires_backends(get_cosine_schedule_with_warmup, ["torch"])


def get_cosine_with_hard_restarts_schedule_with_warmup(*args, **kwargs):
    requires_backends(get_cosine_with_hard_restarts_schedule_with_warmup, ["torch"])


def get_linear_schedule_with_warmup(*args, **kwargs):
    requires_backends(get_linear_schedule_with_warmup, ["torch"])


def get_polynomial_decay_schedule_with_warmup(*args, **kwargs):
    requires_backends(get_polynomial_decay_schedule_with_warmup, ["torch"])


def get_scheduler(*args, **kwargs):
    requires_backends(get_scheduler, ["torch"])


class AudioPipelineOutput(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class DanceDiffusionPipeline(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class DDIMPipeline(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class DDPMPipeline(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class DiffusionPipeline(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class DiTPipeline(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class ImagePipelineOutput(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class KarrasVePipeline(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class LDMPipeline(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class LDMSuperResolutionPipeline(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class PNDMPipeline(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class RePaintPipeline(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class ScoreSdeVePipeline(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class DDIMInverseScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class DDIMScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class DDPMScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class DEISMultistepScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class DPMSolverMultistepScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class DPMSolverSinglestepScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class EulerAncestralDiscreteScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class EulerDiscreteScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class HeunDiscreteScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class IPNDMScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class KarrasVeScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class KDPM2AncestralDiscreteScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class KDPM2DiscreteScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class PNDMScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class RePaintScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class SchedulerMixin(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class ScoreSdeVeScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class UnCLIPScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class UniPCMultistepScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class VQDiffusionScheduler(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod


class EMAModel(metaclass=DummyObject):
    _backends = ["torch"]


    @classmethod

    @classmethod