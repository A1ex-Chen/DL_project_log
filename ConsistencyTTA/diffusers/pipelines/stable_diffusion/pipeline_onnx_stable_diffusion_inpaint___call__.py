@torch.no_grad()
def __call__(self, prompt: Union[str, List[str]], image: PIL.Image.Image,
    mask_image: PIL.Image.Image, height: Optional[int]=512, width: Optional
    [int]=512, num_inference_steps: int=50, guidance_scale: float=7.5,
    negative_prompt: Optional[Union[str, List[str]]]=None,
    num_images_per_prompt: Optional[int]=1, eta: float=0.0, generator:
    Optional[np.random.RandomState]=None, latents: Optional[np.ndarray]=
    None, output_type: Optional[str]='pil', return_dict: bool=True,
    callback: Optional[Callable[[int, int, np.ndarray], None]]=None,
    callback_steps: int=1):
    """
        Function invoked when calling the pipeline for generation.

        Args:
            prompt (`str` or `List[str]`):
                The prompt or prompts to guide the image generation.
            image (`PIL.Image.Image`):
                `Image`, or tensor representing an image batch which will be inpainted, *i.e.* parts of the image will
                be masked out with `mask_image` and repainted according to `prompt`.
            mask_image (`PIL.Image.Image`):
                `Image`, or tensor representing an image batch, to mask `image`. White pixels in the mask will be
                repainted, while black pixels will be preserved. If `mask_image` is a PIL image, it will be converted
                to a single channel (luminance) before use. If it's a tensor, it should contain one color channel (L)
                instead of 3, so the expected shape would be `(B, H, W, 1)`.
            height (`int`, *optional*, defaults to 512):
                The height in pixels of the generated image.
            width (`int`, *optional*, defaults to 512):
                The width in pixels of the generated image.
            num_inference_steps (`int`, *optional*, defaults to 50):
                The number of denoising steps. More denoising steps usually lead to a higher quality image at the
                expense of slower inference.
            guidance_scale (`float`, *optional*, defaults to 7.5):
                Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).
                `guidance_scale` is defined as `w` of equation 2. of [Imagen
                Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >
                1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt`,
                usually at the expense of lower image quality.
            negative_prompt (`str` or `List[str]`, *optional*):
                The prompt or prompts not to guide the image generation. Ignored when not using guidance (i.e., ignored
                if `guidance_scale` is less than `1`).
            num_images_per_prompt (`int`, *optional*, defaults to 1):
                The number of images to generate per prompt.
            eta (`float`, *optional*, defaults to 0.0):
                Corresponds to parameter eta (Î·) in the DDIM paper: https://arxiv.org/abs/2010.02502. Only applies to
                [`schedulers.DDIMScheduler`], will be ignored for others.
            generator (`np.random.RandomState`, *optional*):
                A np.random.RandomState to make generation deterministic.
            latents (`np.ndarray`, *optional*):
                Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image
                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
                tensor will ge generated by sampling using the supplied random `generator`.
            output_type (`str`, *optional*, defaults to `"pil"`):
                The output format of the generate image. Choose between
                [PIL](https://pillow.readthedocs.io/en/stable/): `PIL.Image.Image` or `np.array`.
            return_dict (`bool`, *optional*, defaults to `True`):
                Whether or not to return a [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] instead of a
                plain tuple.
            callback (`Callable`, *optional*):
                A function that will be called every `callback_steps` steps during inference. The function will be
                called with the following arguments: `callback(step: int, timestep: int, latents: np.ndarray)`.
            callback_steps (`int`, *optional*, defaults to 1):
                The frequency at which the `callback` function will be called. If not specified, the callback will be
                called at every step.

        Returns:
            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] or `tuple`:
            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] if `return_dict` is True, otherwise a `tuple.
            When returning a tuple, the first element is a list with the generated images, and the second element is a
            list of `bool`s denoting whether the corresponding generated image likely represents "not-safe-for-work"
            (nsfw) content, according to the `safety_checker`.
        """
    if isinstance(prompt, str):
        batch_size = 1
    elif isinstance(prompt, list):
        batch_size = len(prompt)
    else:
        raise ValueError(
            f'`prompt` has to be of type `str` or `list` but is {type(prompt)}'
            )
    if height % 8 != 0 or width % 8 != 0:
        raise ValueError(
            f'`height` and `width` have to be divisible by 8 but are {height} and {width}.'
            )
    if callback_steps is None or callback_steps is not None and (not
        isinstance(callback_steps, int) or callback_steps <= 0):
        raise ValueError(
            f'`callback_steps` has to be a positive integer but is {callback_steps} of type {type(callback_steps)}.'
            )
    if generator is None:
        generator = np.random
    self.scheduler.set_timesteps(num_inference_steps)
    do_classifier_free_guidance = guidance_scale > 1.0
    prompt_embeds = self._encode_prompt(prompt, num_images_per_prompt,
        do_classifier_free_guidance, negative_prompt)
    num_channels_latents = NUM_LATENT_CHANNELS
    latents_shape = (batch_size * num_images_per_prompt,
        num_channels_latents, height // 8, width // 8)
    latents_dtype = prompt_embeds.dtype
    if latents is None:
        latents = generator.randn(*latents_shape).astype(latents_dtype)
    elif latents.shape != latents_shape:
        raise ValueError(
            f'Unexpected latents shape, got {latents.shape}, expected {latents_shape}'
            )
    mask, masked_image = prepare_mask_and_masked_image(image, mask_image,
        latents_shape[-2:])
    mask = mask.astype(latents.dtype)
    masked_image = masked_image.astype(latents.dtype)
    masked_image_latents = self.vae_encoder(sample=masked_image)[0]
    masked_image_latents = 0.18215 * masked_image_latents
    mask = mask.repeat(batch_size * num_images_per_prompt, 0)
    masked_image_latents = masked_image_latents.repeat(batch_size *
        num_images_per_prompt, 0)
    mask = np.concatenate([mask] * 2) if do_classifier_free_guidance else mask
    masked_image_latents = np.concatenate([masked_image_latents] * 2
        ) if do_classifier_free_guidance else masked_image_latents
    num_channels_mask = mask.shape[1]
    num_channels_masked_image = masked_image_latents.shape[1]
    unet_input_channels = NUM_UNET_INPUT_CHANNELS
    if (num_channels_latents + num_channels_mask +
        num_channels_masked_image != unet_input_channels):
        raise ValueError(
            f'Incorrect configuration settings! The config of `pipeline.unet` expects {unet_input_channels} but received `num_channels_latents`: {num_channels_latents} + `num_channels_mask`: {num_channels_mask} + `num_channels_masked_image`: {num_channels_masked_image} = {num_channels_latents + num_channels_masked_image + num_channels_mask}. Please verify the config of `pipeline.unet` or your `mask_image` or `image` input.'
            )
    self.scheduler.set_timesteps(num_inference_steps)
    latents = latents * np.float64(self.scheduler.init_noise_sigma)
    accepts_eta = 'eta' in set(inspect.signature(self.scheduler.step).
        parameters.keys())
    extra_step_kwargs = {}
    if accepts_eta:
        extra_step_kwargs['eta'] = eta
    timestep_dtype = next((input.type for input in self.unet.model.
        get_inputs() if input.name == 'timestep'), 'tensor(float)')
    timestep_dtype = ORT_TO_NP_TYPE[timestep_dtype]
    for i, t in enumerate(self.progress_bar(self.scheduler.timesteps)):
        latent_model_input = np.concatenate([latents] * 2
            ) if do_classifier_free_guidance else latents
        latent_model_input = self.scheduler.scale_model_input(torch.
            from_numpy(latent_model_input), t)
        latent_model_input = latent_model_input.cpu().numpy()
        latent_model_input = np.concatenate([latent_model_input, mask,
            masked_image_latents], axis=1)
        timestep = np.array([t], dtype=timestep_dtype)
        noise_pred = self.unet(sample=latent_model_input, timestep=timestep,
            encoder_hidden_states=prompt_embeds)[0]
        if do_classifier_free_guidance:
            noise_pred_uncond, noise_pred_text = np.split(noise_pred, 2)
            noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_text
                 - noise_pred_uncond)
        scheduler_output = self.scheduler.step(torch.from_numpy(noise_pred),
            t, torch.from_numpy(latents), **extra_step_kwargs)
        latents = scheduler_output.prev_sample.numpy()
        if callback is not None and i % callback_steps == 0:
            callback(i, t, latents)
    latents = 1 / 0.18215 * latents
    image = np.concatenate([self.vae_decoder(latent_sample=latents[i:i + 1]
        )[0] for i in range(latents.shape[0])])
    image = np.clip(image / 2 + 0.5, 0, 1)
    image = image.transpose((0, 2, 3, 1))
    if self.safety_checker is not None:
        safety_checker_input = self.feature_extractor(self.numpy_to_pil(
            image), return_tensors='np').pixel_values.astype(image.dtype)
        images, has_nsfw_concept = [], []
        for i in range(image.shape[0]):
            image_i, has_nsfw_concept_i = self.safety_checker(clip_input=
                safety_checker_input[i:i + 1], images=image[i:i + 1])
            images.append(image_i)
            has_nsfw_concept.append(has_nsfw_concept_i[0])
        image = np.concatenate(images)
    else:
        has_nsfw_concept = None
    if output_type == 'pil':
        image = self.numpy_to_pil(image)
    if not return_dict:
        return image, has_nsfw_concept
    return StableDiffusionPipelineOutput(images=image,
        nsfw_content_detected=has_nsfw_concept)
