@torch.no_grad()
def __call__(self, prompt: Union[str, List[str]], height: Optional[int]=
    None, width: Optional[int]=None, num_inference_steps: Optional[int]=50,
    guidance_scale: Optional[float]=1.0, eta: Optional[float]=0.0,
    generator: Optional[Union[torch.Generator, List[torch.Generator]]]=None,
    latents: Optional[torch.FloatTensor]=None, output_type: Optional[str]=
    'pil', return_dict: bool=True, **kwargs) ->Union[Tuple, ImagePipelineOutput
    ]:
    """
        Args:
            prompt (`str` or `List[str]`):
                The prompt or prompts to guide the image generation.
            height (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):
                The height in pixels of the generated image.
            width (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):
                The width in pixels of the generated image.
            num_inference_steps (`int`, *optional*, defaults to 50):
                The number of denoising steps. More denoising steps usually lead to a higher quality image at the
                expense of slower inference.
            guidance_scale (`float`, *optional*, defaults to 1.0):
                Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).
                `guidance_scale` is defined as `w` of equation 2. of [Imagen
                Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >
                1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt` at
                the, usually at the expense of lower image quality.
            generator (`torch.Generator`, *optional*):
                One or a list of [torch generator(s)](https://pytorch.org/docs/stable/generated/torch.Generator.html)
                to make generation deterministic.
            latents (`torch.FloatTensor`, *optional*):
                Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image
                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
                tensor will ge generated by sampling using the supplied random `generator`.
            output_type (`str`, *optional*, defaults to `"pil"`):
                The output format of the generate image. Choose between
                [PIL](https://pillow.readthedocs.io/en/stable/): `PIL.Image.Image` or `np.array`.
            return_dict (`bool`, *optional*):
                Whether or not to return a [`~pipelines.ImagePipelineOutput`] instead of a plain tuple.

        Returns:
            [`~pipelines.ImagePipelineOutput`] or `tuple`: [`~pipelines.utils.ImagePipelineOutput`] if `return_dict` is
            True, otherwise a `tuple. When returning a tuple, the first element is a list with the generated images.
        """
    height = height or self.unet.config.sample_size * self.vae_scale_factor
    width = width or self.unet.config.sample_size * self.vae_scale_factor
    if isinstance(prompt, str):
        batch_size = 1
    elif isinstance(prompt, list):
        batch_size = len(prompt)
    else:
        raise ValueError(
            f'`prompt` has to be of type `str` or `list` but is {type(prompt)}'
            )
    if height % 8 != 0 or width % 8 != 0:
        raise ValueError(
            f'`height` and `width` have to be divisible by 8 but are {height} and {width}.'
            )
    if guidance_scale != 1.0:
        uncond_input = self.tokenizer([''] * batch_size, padding=
            'max_length', max_length=77, truncation=True, return_tensors='pt')
        negative_prompt_embeds = self.bert(uncond_input.input_ids.to(self.
            device))[0]
    text_input = self.tokenizer(prompt, padding='max_length', max_length=77,
        truncation=True, return_tensors='pt')
    prompt_embeds = self.bert(text_input.input_ids.to(self.device))[0]
    latents_shape = batch_size, self.unet.in_channels, height // 8, width // 8
    if isinstance(generator, list) and len(generator) != batch_size:
        raise ValueError(
            f'You have passed a list of generators of length {len(generator)}, but requested an effective batch size of {batch_size}. Make sure the batch size matches the length of the generators.'
            )
    if latents is None:
        latents = randn_tensor(latents_shape, generator=generator, device=
            self.device, dtype=prompt_embeds.dtype)
    elif latents.shape != latents_shape:
        raise ValueError(
            f'Unexpected latents shape, got {latents.shape}, expected {latents_shape}'
            )
    latents = latents.to(self.device)
    self.scheduler.set_timesteps(num_inference_steps)
    accepts_eta = 'eta' in set(inspect.signature(self.scheduler.step).
        parameters.keys())
    extra_kwargs = {}
    if accepts_eta:
        extra_kwargs['eta'] = eta
    for t in self.progress_bar(self.scheduler.timesteps):
        if guidance_scale == 1.0:
            latents_input = latents
            context = prompt_embeds
        else:
            latents_input = torch.cat([latents] * 2)
            context = torch.cat([negative_prompt_embeds, prompt_embeds])
        noise_pred = self.unet(latents_input, t, encoder_hidden_states=context
            ).sample
        if guidance_scale != 1.0:
            noise_pred_uncond, noise_prediction_text = noise_pred.chunk(2)
            noise_pred = noise_pred_uncond + guidance_scale * (
                noise_prediction_text - noise_pred_uncond)
        latents = self.scheduler.step(noise_pred, t, latents, **extra_kwargs
            ).prev_sample
    latents = 1 / self.vqvae.config.scaling_factor * latents
    image = self.vqvae.decode(latents).sample
    image = (image / 2 + 0.5).clamp(0, 1)
    image = image.cpu().permute(0, 2, 3, 1).numpy()
    if output_type == 'pil':
        image = self.numpy_to_pil(image)
    if not return_dict:
        return image,
    return ImagePipelineOutput(images=image)
